## Librairies
from __future__ import annotations
from datetime import datetime
from math import exp,sqrt
from scipy.stats import norm


'''
Ensemble des definitions utiles pour les autres classes
'''

### Forward
def calculate_forward_price(spot_price, interest_rates, delta_t) -> float:
    return spot_price * calculate_forward_factor (interest_rates, delta_t)

def calculate_forward_factor(interest_rates: float, delta_t: float) -> float:
    return exp(interest_rates * delta_t)  # = S_0 * exp(r * delta_t) avec S0 dans la cass node


### Discount
def calculate_discount_price(spot_price, interest_rates: float, delta_t: float) -> float:
    return spot_price * calculate_discount_factor(interest_rates, delta_t)

def calculate_discount_factor(interest_rates: float, delta_t: float) -> float:
    return exp(interest_rates * delta_t)  # exp(-r * delta_t) avec S0 dans la cass node 


### Delta_t
def calculate_delta_t(maturity_date:datetime, pricing_date:datetime,nb_steps:int, nb_days:int) -> float:
    return ((maturity_date - pricing_date).days/nb_steps) / nb_days
    # delta_t = ((date_maturite - date_pricing)/ nb_steps)/365
    #il calcule le facteur entre chaque noeud selon nos dates d'arrivées et depart
    # on divise le tout par le nb de steps pour subdivisions
    #enfin on divise par 365 pour avoir sous format jour


### Alpha
def calculate_alpha(volatility:float, delta_t:float, mutliplicateur:float) -> float:
    return exp (volatility * mutliplicateur * sqrt (delta_t))
    #alpha = exp (sigma * multiplicateur * racine(delta_t)), avec souvent mutliplicateur = racine (3)


# fonction de repartition loi normale
def calculate_norm(x : float) ->float:
    return norm.cdf(x)
    #sert pour le cauclu de d1 et d2




## class market 
class Market:
    def __init__(self,interest_rate:float,volatility:float, spot_price:float,dividend_price:float,dividend_ex_date:datetime ):

        self.interest_rate = interest_rate
        self.volatility = volatility
        self.spot_price = spot_price
        self.dividend_price = dividend_price
        self.dividend_ex_date = dividend_ex_date

## class option

class Option:
    def __init__(self,option_type:str,exercise_type:str,strike_price:float,maturity_date:datetime):
        self.option_type = option_type
        self.exercise_type = exercise_type
        self.strike_price = strike_price
        self.maturity_date = maturity_date

    def payoff(self,spot) -> float:
        if self.option_type== "call":
            return max(0 , spot - self.strike_price)
        elif self.option_type == "put":
            return max (0 , self.strike_price - spot)
        else:
            raise ValueError("Wrong input, please be careful, insert call or put")
        

class Tree:

    nb_days=365


    def __init__(
    self,
    market:Market, 
    option:Option,
    pricing_date : datetime, 
    nb_steps : int
    ):
        
        self.market = market
        self.option = option
        self.pricing_date = pricing_date
        self.nb_steps = nb_steps
        
        self.delta_t = self.calculate_delta_t()
        #self.delta_t = self.calculate_bis_delta_t()
        self.alpha = self.calculate_alpha()
        #self.alpha = self.calculate_bis_alpha()

        #self.parent = None

        # if self.pricing_date>self.option.maturity_date:
        #     raise ValueError("Pricing date must be before the maturity date")
        # else:
        #     self.delta_t = calculate_delta_t(self.option.maturity_date, self.pricing_date, self.nb_steps, self.nb_days)
        #     #=((maturity_date-pricing_date)/nb_steps)/365
        #     #why 365 ? to have the number in year, i.e x/365
        #     self.alpha = calculate_alpha(self.market.volatility, self.delta_t, sqrt(3))


        self.root=Node(self.market,self,self.market.spot_price)
        #point de depart = root

        self.build_tree(self)

    # def calculate_delta_t(maturity_date:datetime, pricing_date:datetime,nb_steps:int, nb_days:int) -> float:
    #     return ((maturity_date - pricing_date).days / nb_steps) / nb_days
    
    def calculate_delta_t(self):
        return (self.option.maturity_date - self.pricing_date).days /self.nb_steps / self.nb_days

    def calculate_alpha(self) -> float:
         return exp (self.market.volatility * sqrt (3* self.delta_t))
    

    # def calculate_bis_delta_t(self) -> float: #a regarder
    #     delta_timedelta = self.option.maturity_date - self.pricing_date
    #     delta_days = float(delta_timedelta.days)
    #     return (delta_days / self.nb_steps )/ self.nb_days
    #     #return ((self.option.maturity_date - self.pricing_date).days/self.nb_steps) / self.nb_days

    # def calculate_bis_alpha(self) -> float : #a regarder
    #     return exp(self.market.volatility  * sqrt (3 * self.delta_t))

    def build_tree(self):
        n=self.root #current node
        for i in range(self.nb_steps): #construit avec la boucle for le nb de noeud et donc le nb de root de 0 a T
            n=self.build_node_column(n) #pour chaque noeud, il faut construire les noeud du bas => def build_node_column
        #dividende ? car pas le n steps dans node

    def build_node_column(self,n : Node)-> Node:
        next_node= Node(self.market, self,n.forward_price)

        n.build_block(next_node)
        n1 = n
        while n1.down_node is not None: #tant que le noeud down != 0 donc jusq'a qu'il y ait un noeud a executer
            n1=n1.down_node #on affecte a n1 le noeud down
            n1.build_block(next_node) 
            #a partir du noeud down(n1 donc) on construit les 3 prochains=es branches4

        #on fait la meme pour l'etat up
        n2 = n
        while n2.up_node is not None:
            n2=n2.up_node
            n2.build_block(next_node)



## class node:
class Node:


    def __init__(self,market,tree,spot_price:float) -> None:

        self.tree=tree
        self.market=market
        self.spot_price=spot_price

        self.forward_price = calculate_forward_price
        (
        self.spot_price, 
        self.market.interest_rate, 
        self.tree.delta_t
        )

        self.proba_up= None       # Initialise proba_up à None
        self.proba_mid= None      # Initialise proba_mid à None
        self.proba_down= None     # Initialise proba_down à None
        
        self.down_node = None     # Initialise down_node à None
        self.mid_node = None      # Initialise mid_node à None
        self.up_node = None       # Initialise up_node à None
        
        self.next_mid = None

        self.option_value = None  

        self.variance = None
        self.esperance = None 

        #for i in range(self.tree.nb_steps):
        # if (self.tree.pricing_date
        #     <= self.market.dividend_ex_date
        #     <=self.tree.pricing_date + timedelta ( self.tree.delta_t * self.tree.nb_days).days
        # ):
        #     forward_ajuste= self.forward_price-self.market.dividend_price
        # else:
        #     forward_ajuste = self.forward_price
            
        # self.forward_price = forward_ajuste

    
       
        # mettre dans init les autres trucs du bas genre esperance, variance, proba up mid and down
    # def calculate_all(self):
    #     self.calculate_variance()
    #     self.calculate_proba()
    #     self.calculate_option()
    #     self.calculate_check()


    def calculate_esperance(self)->float:
        self.esperance=self.spot_price * calculate_forward_factor(self.market.interest_rate, self.tree.delta_t) - self.market.dividend_price
        # calcul de l'esperance utile pour calcul des proba, et aussi pour verifier les conditions (voir calculate_check)
        

    def calculate_variance(self)-> float:
        self.variance=(self.spot_price **2) * exp(2*self.market.interest_rate * self.tree.delta_t) * (exp(self.market.volatility**2 * self.tree.delta_t) -1)
        # calcul de la variance utile pour calcul des proba, et aussi pour verifier les conditions (voir calculate_check)


    def calculate_proba(self)->float:
        self.proba_down= (1/self.forward_price**2)*((self.variance + self.esperance**2)- 1 -(self.tree.alpha + 1) *(1/self.forward_price * self.esperance - 1)/(1-self.tree.alpha)*((1/self.tree.alpha**2)-1))
        self.proba_up= self.proba_down/self.tree.alpha
        self.proba_mid=1 - self.proba_down - self.proba_up
        # calcul des différentes proba, c'est à dire proba pour aller vers état up, mid et odwn


    def calculate_option(self) -> float:
        self.up_price = self.spot_price * self.tree.alpha
        self.down_price = self.spot_price / self.tree.alpha
        self.mid_price = self.forward_price
 


    def calculate_check(self):
        if self.proba_down + self.proba_mid + self.proba_up != 1:
            raise ValueError('The sum of the probabilities down + mid + up must be equal to 1, please look at node class')
            #si somme des proba différent de 1 -> error 
        elif (self.down_price* self.proba_down + self.mid_price * self.proba_mid + self.up_price + self.proba_up) != self.forward_price:
            raise ValueError('Moment of order 1 is not verified')
            # it good : self.forward_price = self.esperance
            # Moment d'ordre 1:
        elif (self.down_price**2 * self.proba_down + self.mid_price**2 * self.proba_mid + self.up_price**2 + self.proba_up) != self.variance + self.esperance **2: 
            raise ValueError('Moment of order 2 is not verified')
            # Moment d'ordre 2:
        

    def price (self, option:Option) -> float:
        if self.next_mid is None: #quand on se retrouve a T
            self.option_value = option.payoff(self.spot_price)


        elif self.option_value is None: #[0 , T-1]
            self.option_value = calculate_discount_factor(self.market.interest_rate, self.tree.delta_t)*(
            self.proba_up * self.up_price + 
            self.proba_mid * self.mid_price + 
            self.proba_down * self.down_price
            ) #exp (-r * delta_t)* [proba pondéré par prix]
        elif option.option_type == "am":
            self.option_value= max(self.option_value, option.payoff(self.spot_price)) #prend le max entre VI et valeur du noeud
        else :
            raise ValueError("Problem about the function price, please look at node class")

        return self.option_value



    #connection des noeuds
    def build_block(self, next:Node):
        nmid=self.get_mid(next)


        if nmid.down_node is None:
            ndown=Node(self.market,self,nmid.spot_price/self.tree.alpha)
            ndown.up_node=nmid
            nmid.down_node=ndown
        else:
            ndown=nmid.down_node
        if nmid.up_node is None:
            nup=Node(self.market,self,nmid.spot_price*self.tree.alpha)
            nup.down_node=nmid
            nmid.up_node=nup
        else:
            nup=nmid.up_node

            #self.tree.next_mid=nmid
        self.next_mid = nmid


    def is_close(self,forward:float) -> bool: #good
        #alpha : float=self.tree.alpha
        return self.spot_price * (1+1/self.tree.alpha)/2 <= forward <= self.spot_price * (1+self.tree.alpha)/2


    def get_mid(self,next : Node): #good
        forward=self.forward_price
        #forward= calculate_forward_price(self.spot_price, self.market.interest_rate, self.tree.delta_t)
        if next.is_close(forward): #regarder si None ou pas, avec debeuguuer
            return next
        elif forward > self.spot_price:
            while not next.is_close(forward):
                next=next.move_up()
        else :
            while not next.is_close(forward):
                next=next.move_down()
        return next
                 

    def move_up(self): #good
        if self.up_node is None:
            nup=Node(self.market,self,self.spot_price*self.tree.alpha)
            nup.down_node=self
            self.up_node=nup
            #return nup
        else:
            nup = self.up_node
            #return self.up_node

        return nup
        #rien


    def move_down(self) : #good
        if self.down_node is None:
            ndown=Node(self.market,self,self.spot_price/self.tree.alpha)
            ndown.up_node=self
            self.down_node=ndown
        else:
            ndown=self.down_node

        return ndown          

    def __str__(self) -> str:
        result_node = "Node class -\n"
        result_node += f"  Spot Price: {self.spot_price:.2f}\n"
        result_node += f"  Forward Price: {self.forward_price:.2f}\n"
        result_node += f"  Variance: {self.variance:3f}\n"
        result_node += f"  Esperance: {self.esperance:.3f}\n"
        result_node += f"  Proba Up: {self.proba_up:.3f}\n"
        result_node += f"  Proba Mid: {self.proba_mid:.3f}\n"
        result_node += f"  Proba Down: {self.proba_down:.3f}\n"
        result_node += f"  Option Value: {self.option_value:.2f}\n"
        return result_node
    



    # def calculate_option_value(self) -> float :
    #     #arranger calculate_option avec calculate_option_type afin de compute au bon endroit
    #     if next_node = "up":
    #         self.option_value = self.up_price
    #     elif next_node= "down":
    #         self.option_value=self.down_price
    #     elif next_node= "mid":
    #         self.option_value=self.mid_price
    #     else:
    #         raise ValueError("You may have a problem, please look")


market = Market(interest_rate=0.04, 
        volatility=0.25, 
        spot_price=100.0, 
        dividend_price=0, 
        dividend_ex_date=datetime(2024, 5, 24)
)

option = Option(option_type="call", 
        exercise_type="eu",
        strike_price=102.0, 
        maturity_date=datetime(2024, 9, 20)
)


tree= Tree(market,
        option,
        pricing_date=datetime(2023,9,23),
        nb_steps=365)

price = tree.price(option)

tree.print_tree()

